var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';
/**
 * @name Crashlytics
 * @description
 * API for interacting with the Crashlytics kit.
 *
 * https://docs.fabric.io/crashlytics/index.html
 *
 * @usage
 * ```typescript
 * import { Crashlytics } from '@ionic-native/fabric';
 *
 *
 * constructor(private crashlytics: Crashlytics) { }
 *
 * ...
 *
 * try {
 *  await this.loadData();
 * } catch (e) {
 *  this.crashlytics.addLog("Error while loading data");
 *  this.crashlytics.sendNonFatalCrash(e.message || e);
 * }
 *
 * ```
 */
var Crashlytics = (function (_super) {
    __extends(Crashlytics, _super);
    function Crashlytics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add logging that will be sent with your crash data. This logging will not show up
     * in the system.log and will only be visible in your Crashlytics dashboard.
     * @param message {string}
     */
    /**
       * Add logging that will be sent with your crash data. This logging will not show up
       * in the system.log and will only be visible in your Crashlytics dashboard.
       * @param message {string}
       */
    Crashlytics.prototype.addLog = /**
       * Add logging that will be sent with your crash data. This logging will not show up
       * in the system.log and will only be visible in your Crashlytics dashboard.
       * @param message {string}
       */
    function (message) {
        return;
    };
    /**
     * Used to simulate a native platform crash (useful for testing Crashlytics logging).
     */
    /**
       * Used to simulate a native platform crash (useful for testing Crashlytics logging).
       */
    Crashlytics.prototype.sendCrash = /**
       * Used to simulate a native platform crash (useful for testing Crashlytics logging).
       */
    function () {
        return;
    };
    /**
     * Used to log a non-fatal error message (Android only).
     */
    /**
       * Used to log a non-fatal error message (Android only).
       */
    Crashlytics.prototype.sendNonFatalCrash = /**
       * Used to log a non-fatal error message (Android only).
       */
    function (message, stacktrace) {
        return;
    };
    /**
     * Used to record a non-fatal error message (iOS only).
     */
    /**
       * Used to record a non-fatal error message (iOS only).
       */
    Crashlytics.prototype.recordError = /**
       * Used to record a non-fatal error message (iOS only).
       */
    function (message, code) {
        return;
    };
    /**
     * Sets the user's identifier for logging to Crashlytics backend.
     */
    /**
       * Sets the user's identifier for logging to Crashlytics backend.
       */
    Crashlytics.prototype.setUserIdentifier = /**
       * Sets the user's identifier for logging to Crashlytics backend.
       */
    function (userId) {
        return;
    };
    /**
     * Sets the user's name for logging to Crashlytics backend.
     */
    /**
       * Sets the user's name for logging to Crashlytics backend.
       */
    Crashlytics.prototype.setUserName = /**
       * Sets the user's name for logging to Crashlytics backend.
       */
    function (userName) {
        return;
    };
    /**
     * Sets the user's email address for logging to Crashlytics backend.
     */
    /**
       * Sets the user's email address for logging to Crashlytics backend.
       */
    Crashlytics.prototype.setUserEmail = /**
       * Sets the user's email address for logging to Crashlytics backend.
       */
    function (email) {
        return;
    };
    /**
     * Sets a custom key/value pair for logging to Crashlytics backend.
     */
    /**
       * Sets a custom key/value pair for logging to Crashlytics backend.
       */
    Crashlytics.prototype.setStringValueForKey = /**
       * Sets a custom key/value pair for logging to Crashlytics backend.
       */
    function (value, key) {
        return;
    };
    /**
     * Sets a custom key/value pair for logging to Crashlytics backend.
     */
    /**
       * Sets a custom key/value pair for logging to Crashlytics backend.
       */
    Crashlytics.prototype.setIntValueForKey = /**
       * Sets a custom key/value pair for logging to Crashlytics backend.
       */
    function (value, key) {
        return;
    };
    /**
     * Sets a custom key/value pair for logging to Crashlytics backend.
     */
    /**
       * Sets a custom key/value pair for logging to Crashlytics backend.
       */
    Crashlytics.prototype.setBoolValueForKey = /**
       * Sets a custom key/value pair for logging to Crashlytics backend.
       */
    function (value, key) {
        return;
    };
    /**
     * Sets a custom key/value pair for logging to Crashlytics backend.
     */
    /**
       * Sets a custom key/value pair for logging to Crashlytics backend.
       */
    Crashlytics.prototype.setFloatValueForKey = /**
       * Sets a custom key/value pair for logging to Crashlytics backend.
       */
    function (value, key) {
        return;
    };
    Crashlytics.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], Crashlytics.prototype, "addLog", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Crashlytics.prototype, "sendCrash", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", void 0)
    ], Crashlytics.prototype, "sendNonFatalCrash", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Number]),
        __metadata("design:returntype", void 0)
    ], Crashlytics.prototype, "recordError", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], Crashlytics.prototype, "setUserIdentifier", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], Crashlytics.prototype, "setUserName", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", void 0)
    ], Crashlytics.prototype, "setUserEmail", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String]),
        __metadata("design:returntype", void 0)
    ], Crashlytics.prototype, "setStringValueForKey", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String]),
        __metadata("design:returntype", void 0)
    ], Crashlytics.prototype, "setIntValueForKey", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Boolean, String]),
        __metadata("design:returntype", void 0)
    ], Crashlytics.prototype, "setBoolValueForKey", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String]),
        __metadata("design:returntype", void 0)
    ], Crashlytics.prototype, "setFloatValueForKey", null);
    /**
     * @name Crashlytics
     * @description
     * API for interacting with the Crashlytics kit.
     *
     * https://docs.fabric.io/crashlytics/index.html
     *
     * @usage
     * ```typescript
     * import { Crashlytics } from '@ionic-native/fabric';
     *
     *
     * constructor(private crashlytics: Crashlytics) { }
     *
     * ...
     *
     * try {
     *  await this.loadData();
     * } catch (e) {
     *  this.crashlytics.addLog("Error while loading data");
     *  this.crashlytics.sendNonFatalCrash(e.message || e);
     * }
     *
     * ```
     */
    Crashlytics = __decorate([
        Plugin({
            pluginName: 'Crashlytics',
            plugin: 'cordova-fabric-plugin',
            pluginRef: 'window.fabric.Crashlytics',
            repo: 'https://www.npmjs.com/package/cordova-fabric-plugin',
            install: 'ionic cordova plugin add cordova-fabric-plugin --variable FABRIC_API_KEY=XXX --variable FABRIC_API_SECRET=xxx',
            installVariables: ['FABRIC_API_KEY', 'FABRIC_API_SECRET'],
            platforms: ['Android', 'iOS']
        })
    ], Crashlytics);
    return Crashlytics;
}(IonicNativePlugin));
export { Crashlytics };
/**
 * @name Answers
 * @description
 * API for interacting with the Answers kit.
 *
 * https://docs.fabric.io/crashlytics/index.html
 *
 * @usage
 * ```typescript
 * import { Answers } from '@ionic-native/fabric';
 *
 *
 * constructor(private answers: Answers) { }
 *
 * ...
 *
 * this.answers.sendCustomEvent('SomeCustomEvent', { some: "attributes" })
 *
 * ```
 */
var Answers = (function (_super) {
    __extends(Answers, _super);
    function Answers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sends the Purchase tracking event.
     *
     * All parameters are optional.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#purchase
     *
     * @param itemPrice The item's amount in the currency specified.
     * @param currency The ISO4217 currency code.
     * @param success Was the purchase completed succesfully?
     * @param itemName The human-readable name for the item.
     * @param itemType The category the item falls under.
     * @param itemId A unique identifier used to track the item.
     * @param attributes Any additional user-defined attributes to be logged.
     */
    /**
       * Sends the Purchase tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#purchase
       *
       * @param itemPrice The item's amount in the currency specified.
       * @param currency The ISO4217 currency code.
       * @param success Was the purchase completed succesfully?
       * @param itemName The human-readable name for the item.
       * @param itemType The category the item falls under.
       * @param itemId A unique identifier used to track the item.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    Answers.prototype.sendPurchase = /**
       * Sends the Purchase tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#purchase
       *
       * @param itemPrice The item's amount in the currency specified.
       * @param currency The ISO4217 currency code.
       * @param success Was the purchase completed succesfully?
       * @param itemName The human-readable name for the item.
       * @param itemType The category the item falls under.
       * @param itemId A unique identifier used to track the item.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    function (itemPrice, currency, success, itemName, itemType, itemId, attributes) {
        return;
    };
    /**
     * Sends the Add To Cart tracking event.
     *
     * All parameters are optional.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#add-to-cart
     *
     * @param itemPrice The item's amount in the currency specified.
     * @param currency The ISO4217 currency code.
     * @param itemName The human-readable name for the item.
     * @param itemType The category the item falls under.
     * @param itemId A unique identifier used to track the item.
     * @param attributes Any additional user-defined attributes to be logged.
     */
    /**
       * Sends the Add To Cart tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#add-to-cart
       *
       * @param itemPrice The item's amount in the currency specified.
       * @param currency The ISO4217 currency code.
       * @param itemName The human-readable name for the item.
       * @param itemType The category the item falls under.
       * @param itemId A unique identifier used to track the item.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    Answers.prototype.sendAddToCart = /**
       * Sends the Add To Cart tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#add-to-cart
       *
       * @param itemPrice The item's amount in the currency specified.
       * @param currency The ISO4217 currency code.
       * @param itemName The human-readable name for the item.
       * @param itemType The category the item falls under.
       * @param itemId A unique identifier used to track the item.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    function (itemPrice, currency, itemName, itemType, itemId, attributes) {
        return;
    };
    /**
     * Sends the Start Checkout tracking event.
     *
     * All parameters are optional.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#start-checkout
     *
     * @param totalPrice The total price of all items in cart in the currency specified.
     * @param currency The ISO4217 currency code.
     * @param itemCount The count of items in cart.
     * @param attributes Any additional user-defined attributes to be logged.
     */
    /**
       * Sends the Start Checkout tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#start-checkout
       *
       * @param totalPrice The total price of all items in cart in the currency specified.
       * @param currency The ISO4217 currency code.
       * @param itemCount The count of items in cart.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    Answers.prototype.sendStartCheckout = /**
       * Sends the Start Checkout tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#start-checkout
       *
       * @param totalPrice The total price of all items in cart in the currency specified.
       * @param currency The ISO4217 currency code.
       * @param itemCount The count of items in cart.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    function (totalPrice, currency, itemCount, attributes) {
        return;
    };
    /**
     * Sends the Search tracking event.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#search
     *
     * @param query What the user is searching for.
     * @param attributes Any additional user-defined attributes to be logged.
     */
    /**
       * Sends the Search tracking event.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#search
       *
       * @param query What the user is searching for.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    Answers.prototype.sendSearch = /**
       * Sends the Search tracking event.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#search
       *
       * @param query What the user is searching for.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    function (query, attributes) {
        return;
    };
    /**
     * Sends the Share tracking event.
     *
     * All parameters are optional.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#share
     *
     * @param method The method used to share content.
     * @param contentName The description of the content.
     * @param contentType The type or genre of content.
     * @param contentId A unique key identifying the content.
     * @param attributes Any additional user-defined attributes to be logged.
     */
    /**
       * Sends the Share tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#share
       *
       * @param method The method used to share content.
       * @param contentName The description of the content.
       * @param contentType The type or genre of content.
       * @param contentId A unique key identifying the content.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    Answers.prototype.sendShare = /**
       * Sends the Share tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#share
       *
       * @param method The method used to share content.
       * @param contentName The description of the content.
       * @param contentType The type or genre of content.
       * @param contentId A unique key identifying the content.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    function (method, contentName, contentType, contentId, attributes) {
        return;
    };
    /**
     * Sends the Rated Content tracking event.
     *
     * All parameters are optional.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#rated-content
     *
     * @param rating An integer rating of the content.
     * @param contentName The human-readable name of content.
     * @param contentType The category your item falls under.
     * @param contentId A unique identifier used to track the item.
     * @param attributes Any additional user-defined attributes to be logged.
     */
    /**
       * Sends the Rated Content tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#rated-content
       *
       * @param rating An integer rating of the content.
       * @param contentName The human-readable name of content.
       * @param contentType The category your item falls under.
       * @param contentId A unique identifier used to track the item.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    Answers.prototype.sendRatedContent = /**
       * Sends the Rated Content tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#rated-content
       *
       * @param rating An integer rating of the content.
       * @param contentName The human-readable name of content.
       * @param contentType The category your item falls under.
       * @param contentId A unique identifier used to track the item.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    function (rating, contentName, contentType, contentId, attributes) {
        return;
    };
    /**
     * Sends the Sign Up tracking event.
     *
     * All parameters are optional.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#sign-up
     *
     * @param method An optional description of the sign up method (Twitter, Facebook, etc.); defaults to "Direct".
     * @param success An optional flag that indicates sign up success; defaults to true.
     * @param attributes Any additional user-defined attributes to be logged.
     */
    /**
       * Sends the Sign Up tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#sign-up
       *
       * @param method An optional description of the sign up method (Twitter, Facebook, etc.); defaults to "Direct".
       * @param success An optional flag that indicates sign up success; defaults to true.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    Answers.prototype.sendSignUp = /**
       * Sends the Sign Up tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#sign-up
       *
       * @param method An optional description of the sign up method (Twitter, Facebook, etc.); defaults to "Direct".
       * @param success An optional flag that indicates sign up success; defaults to true.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    function (method, success, attributes) {
        return;
    };
    /**
     * Sends the Log In tracking event.
     *
     * All parameters are optional.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#log-in
     *
     * @param method An optional description of the sign in method (Twitter, Facebook, etc.); defaults to "Direct".
     * @param success An optional flag that indicates sign in success; defaults to true.
     * @param attributes Any additional user-defined attributes to be logged.
     */
    /**
       * Sends the Log In tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#log-in
       *
       * @param method An optional description of the sign in method (Twitter, Facebook, etc.); defaults to "Direct".
       * @param success An optional flag that indicates sign in success; defaults to true.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    Answers.prototype.sendLogIn = /**
       * Sends the Log In tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#log-in
       *
       * @param method An optional description of the sign in method (Twitter, Facebook, etc.); defaults to "Direct".
       * @param success An optional flag that indicates sign in success; defaults to true.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    function (method, success, attributes) {
        return;
    };
    /**
     * Sends the Invite tracking event.
     *
     * All parameters are optional.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#invite
     *
     * @param method An optional description of the sign in method (Twitter, Facebook, etc.); defaults to "Direct".
     * @param attributes Any additional user-defined attributes to be logged.
     */
    /**
       * Sends the Invite tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#invite
       *
       * @param method An optional description of the sign in method (Twitter, Facebook, etc.); defaults to "Direct".
       * @param attributes Any additional user-defined attributes to be logged.
       */
    Answers.prototype.sendInvite = /**
       * Sends the Invite tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#invite
       *
       * @param method An optional description of the sign in method (Twitter, Facebook, etc.); defaults to "Direct".
       * @param attributes Any additional user-defined attributes to be logged.
       */
    function (method, attributes) {
        return;
    };
    /**
     * Sends the Level Start tracking event.
     *
     * All parameters are optional.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#level-start
     *
     * @param levelName String key describing the level.
     * @param attributes Any additional user-defined attributes to be logged.
     */
    /**
       * Sends the Level Start tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#level-start
       *
       * @param levelName String key describing the level.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    Answers.prototype.sendLevelStart = /**
       * Sends the Level Start tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#level-start
       *
       * @param levelName String key describing the level.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    function (levelName, attributes) {
        return;
    };
    /**
     * Sends the Level End tracking event.
     *
     * All parameters are optional.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#level-end
     *
     * @param levelName String key describing the level.
     * @param score The score for this level.
     * @param success Completed the level or failed trying.
     * @param attributes Any additional user-defined attributes to be logged.
     */
    /**
       * Sends the Level End tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#level-end
       *
       * @param levelName String key describing the level.
       * @param score The score for this level.
       * @param success Completed the level or failed trying.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    Answers.prototype.sendLevelEnd = /**
       * Sends the Level End tracking event.
       *
       * All parameters are optional.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#level-end
       *
       * @param levelName String key describing the level.
       * @param score The score for this level.
       * @param success Completed the level or failed trying.
       * @param attributes Any additional user-defined attributes to be logged.
       */
    function (levelName, score, success, attributes) {
        return;
    };
    /**
     * Send the Content View tracking event.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#content-view
     */
    /**
       * Send the Content View tracking event.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#content-view
       */
    Answers.prototype.sendContentView = /**
       * Send the Content View tracking event.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#content-view
       */
    function (name, type, id, attributes) {
        return;
    };
    /**
     * Shortcut for sendContentView(...) using type of "Screen".
     */
    /**
       * Shortcut for sendContentView(...) using type of "Screen".
       */
    Answers.prototype.sendScreenView = /**
       * Shortcut for sendContentView(...) using type of "Screen".
       */
    function (name, id, attributes) {
        return;
    };
    /**
     * Send a custom tracking event with the given name.
     *
     * https://docs.fabric.io/android/answers/answers-events.html#custom-event
     */
    /**
       * Send a custom tracking event with the given name.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#custom-event
       */
    Answers.prototype.sendCustomEvent = /**
       * Send a custom tracking event with the given name.
       *
       * https://docs.fabric.io/android/answers/answers-events.html#custom-event
       */
    function (name, attributes) {
        return;
    };
    Answers.decorators = [
        { type: Injectable },
    ];
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String, Boolean, String, String, String, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendPurchase", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String, String, String, String, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendAddToCart", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String, Number, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendStartCheckout", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendSearch", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String, String, String, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendShare", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Number, String, String, String, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendRatedContent", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Boolean, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendSignUp", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Boolean, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendLogIn", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendInvite", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendLevelStart", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Number, Boolean, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendLevelEnd", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String, String, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendContentView", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, String, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendScreenView", null);
    __decorate([
        Cordova({ sync: true }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String, Object]),
        __metadata("design:returntype", void 0)
    ], Answers.prototype, "sendCustomEvent", null);
    /**
     * @name Answers
     * @description
     * API for interacting with the Answers kit.
     *
     * https://docs.fabric.io/crashlytics/index.html
     *
     * @usage
     * ```typescript
     * import { Answers } from '@ionic-native/fabric';
     *
     *
     * constructor(private answers: Answers) { }
     *
     * ...
     *
     * this.answers.sendCustomEvent('SomeCustomEvent', { some: "attributes" })
     *
     * ```
     */
    Answers = __decorate([
        Plugin({
            pluginName: 'Answers',
            plugin: 'cordova-fabric-plugin',
            pluginRef: 'window.fabric.Answers',
            repo: 'https://www.npmjs.com/package/cordova-fabric-plugin',
            install: 'ionic cordova plugin add cordova-fabric-plugin --variable FABRIC_API_KEY=XXX --variable FABRIC_API_SECRET=xxx',
            installVariables: ['FABRIC_API_KEY', 'FABRIC_API_SECRET'],
            platforms: ['Android', 'iOS']
        })
    ], Answers);
    return Answers;
}(IonicNativePlugin));
export { Answers };
//# sourceMappingURL=index.js.map